name: Config CMake
description: Update the code coverage badge
author: David Brill (dvd0bvb)
inputs:
  c-compiler:
    description: The C compiler being used
    required: true
  cpp-compiler:
    description: The CXX compiler being used
    required: true
  build-type:
    description: Build type, one of [Release, Debug, RelWithDebInfo]
    required: true
  sanitizer:
    description: Sanitizer type, one of [MSAN, TSAN, ASAN]
    required: false
  use-libcxx:
    description: Link to libc++ explicitly
    required: false 
    default: false
  link-static-runtime:
    description: Statically link the c++ runtime
    required: false
    default: false 
  coverage:
    description: Configure build with code coverage
    required: false 
    default: false

runs:
  using: "composite"
  steps:
    #assuming repo already checked out
    - id: constants
      uses: ./.github/actions/project-constants
      
    - id: cmake-config-flags
      run: |
        FLAGS=${{ steps.constants.outputs.output-type-cmake-flag }}
        if [[ ${{ inputs.use-libcxx }} = 'true' ]]; then
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_LINK_LIBCXX=ON -DBRILLIANT_CMAKE_LIBCXX_INCLUDE_DIR=/usr/local/include/libcxx/c++/v1 -DBRILLIANT_CMAKE_LIBCXX_LIB_DIR=/usr/local/lib/libcxx"
        fi
        if [[ ${{ inputs.link-static-runtime }} = 'true' ]]; then
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_LINK_STATIC_RUNTIME=ON"
        fi
        if [[ ${{ inputs.sanitizer }} = 'ASAN' ]]; then 
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_SANITIZER=ASAN"
        elif [[ ${{ inputs.sanitizer }} = 'TSAN' ]]; then
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_SANITIZER=TSAN"
        elif [[ ${{ inputs.sanitizer }} = 'MSAN' ]]; then
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_SANITIZER=MSAN"
        elif [[ -n ${{ inputs.sanitizer }} ]]; then 
          exit 1
        fi
        if [[ ${{ inputs.coverage }} = 'true' ]]; then 
          FLAGS="$FLAGS -DBRILLIANT_CMAKE_CODE_COVERAGE=ON"
        fi
        echo "flags=$FLAGS" >> $GITHUB_OUTPUT
      shell: bash

    - shell: bash
      working-directory: ${{ github.workspace }}
      run: > 
        cmake -B build -S .
        -DCMAKE_CXX_COMPILER=${{ inputs.cpp-compiler }}
        -DCMAKE_C_COMPILER=${{ inputs.c-compiler }}
        -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
        ${{ steps.cmake-config-flags.ouputs.flags }}
